// import { defineConfig, globalIgnores } from "eslint/config";
// import typescriptEslint from "@typescript-eslint/eslint-plugin";
// import globals from "globals";
// import tsParser from "@typescript-eslint/parser";
// import path from "node:path";
// import { fileURLToPath } from "node:url";
// import js from "@eslint/js";
// import { FlatCompat } from "@eslint/eslintrc";

// const __filename = fileURLToPath(import.meta.url);
// const __dirname = path.dirname(__filename);
// const compat = new FlatCompat({
//     baseDirectory: __dirname,
//     recommendedConfig: js.configs.recommended,
//     allConfig: js.configs.all
// });

// export default defineConfig([globalIgnores(["**/node_modules/", "**/main.js"]), {
//     extends: compat.extends(
//         "eslint:recommended",
//         "plugin:@typescript-eslint/eslint-recommended",
//         "plugin:@typescript-eslint/recommended",
//     ),

//     plugins: {
//         "@typescript-eslint": typescriptEslint,
//     },

//     languageOptions: {
//         globals: {
//             ...globals.node,
//         },

//         parser: tsParser,
//         ecmaVersion: 5,
//         sourceType: "module",
//     },

//     rules: {
//         "no-unused-vars": "off",

//         "@typescript-eslint/no-unused-vars": ["error", {
//             args: "none",
//         }],

//         "@typescript-eslint/ban-ts-comment": "off",
//         "no-prototype-builtins": "off",
//         "@typescript-eslint/no-empty-function": "off",
//     },
// }]);
import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}